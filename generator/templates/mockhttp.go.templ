package sdk

import (
	"fmt"
    "net/http"
    "net/http/httptest"
    "net/url"
    "strings"
)

// endpointResponseExamples denotes response mock split by
//   - the object notifier from the request path:
//     /projects - for projects
//     /project/branches - for branches
//     /project/branches/endpoints - for endpoints
//   - request REST method
var endpointResponseExamples = map[string]map[string]mockResponse{ {{ range $path, $o := .EndpointsResponseExample }}
        "{{ $path }}": { {{ range $method, $resp := $o }}
            "{{ $method }}": mockResponse{
                    Content: `{{ $resp.Content }}`,
                    Code: {{ $resp.Code }},
                },
            {{- end }}
        },
    {{ end -}}
}

// NewMockHTTPClient initiates a mock fo the HTTP client required for the SDK client.
// Mock client return the response as per API spec, except for the errors: 404 and 401 status codes are covered only.
// - 401 is returned when the string `invalidApiKey` is used as the API key;
// - 404 is returned if either of the following:
//   - the string value `notFound` is used as the string argument, e.g. projectID
//   - a negative int/float value is used as the int/float argument, e.g. database ID
func NewMockHTTPClient() MockHTTPClient {
	router := http.NewServeMux()
	u, _ := url.Parse(baseURL)
	var prefix = u.Path
	for p, httpMethodResp := range endpointResponseExamples {
		for httpMethod, resp := range httpMethodResp {
			router.HandleFunc(fmt.Sprintf("%s %s%s", httpMethod, prefix, p), func(w http.ResponseWriter, r *http.Request) {
				w.Header().Set("Content-Type", "application/json")

				switch returnNotFound(r.URL.Path) {
				case true:
					w.WriteHeader(http.StatusNotFound)
					_, _ = w.Write([]byte("authorization failed"))

				case false:
					w.WriteHeader(resp.Code)
					_, _ = w.Write([]byte(resp.Content))
				}

			})
		}
	}
	return MockHTTPClient{
		router: router,
	}
}

func returnNotFound(s string) bool {
	return strings.Contains(s, "notFound") ||
		strings.Contains(s, "notExist") ||
		strings.Contains(s, "notExists") ||
		strings.Contains(s, "missing")
}

type mockResponse struct {
	Content string
	Code    int
}

// MockHTTPClient defines http client to mock the SDK client.
type MockHTTPClient struct {
	router *http.ServeMux
}

func (m MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	var err error
	var resp *http.Response
	if resp = authErrorResp(req); resp == nil {
		_, path := m.router.Handler(req)
		switch path != "" {
		case true:
			rec := httptest.NewRecorder()
			m.router.ServeHTTP(rec, req)
			resp = rec.Result()

		case false:
			o := Error{HTTPCode: http.StatusInternalServerError}
			o.errorResp.Message = "endpoint is not defined"
			resp = o.httpResp()
		}
	}

	return resp, err
}

func authErrorResp(req *http.Request) *http.Response {
	token := req.Header.Get("Authorization")
	if token == "Bearer invalidApiKey" {
		o := Error{HTTPCode: http.StatusForbidden}
		o.Message = "authorization failed"
		return o.httpResp()
	}
	return nil
}
