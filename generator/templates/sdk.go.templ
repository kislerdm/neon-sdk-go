package sdk

import (
	"bytes"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"os"
	"reflect"
	"strconv"
	"strings"
	"time"
)

type errorResp struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Error API error.
type Error struct {
	HTTPCode int
	errorResp
}

func (e Error) Error() string {
	return "[HTTP Code: " + strconv.Itoa(e.HTTPCode) + "][Error Code: " + e.Code + "] " + e.Message
}

func (e Error) httpResp() *http.Response {
	o, _ := json.Marshal(e.errorResp)
	return &http.Response{
		Status:        e.Code,
		StatusCode:    e.HTTPCode,
		Body:          io.NopCloser(bytes.NewReader(o)),
		ContentLength: int64(len(o)),
	}
}

func convertErrorResponse(res *http.Response) error {
	var v errorResp
	buf, err := io.ReadAll(res.Body)
	defer func() { _ = res.Body.Close() }()
	if err != nil {
		return Error{
			HTTPCode: res.StatusCode,
			errorResp: errorResp{
				Message: "cannot read response bytes",
			},
		}
	}
	if err := json.Unmarshal(buf, &v); err != nil {
		return Error{
			HTTPCode: res.StatusCode,
			errorResp: errorResp{
				Message: err.Error(),
			},
		}
	}
	return Error{
		HTTPCode:  res.StatusCode,
		errorResp: v,
	}
}

// Client defines the Neon SDK client.
type Client interface { {{ range .EndpointsInterfaceMethods }}
{{.}}
{{ end }}
}

// HTTPClient client to handle http requests.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type options struct {
	// key API access key.
	key string

	// httpClient Client to communicate with the API over http.
	httpClient HTTPClient
}

type client struct {
	options options

	baseURL string
}

const (
	baseURL        = "{{.ServerURL}}"
	defaultTimeout = 2 * time.Minute
)

// NewClient initialised the Client to communicate to the Neon Platform.
func NewClient(optFns ...func(*options)) (Client, error) {
	o := options{
		key:        "",
		httpClient: nil,
	}

	for _, fn := range optFns {
		fn(&o)
	}

	resolveHTTPClient(&o)
	if err := resolveApiKey(&o); err != nil {
		return nil, err
	}

	return &client{
		baseURL: baseURL,
		options: o,
	}, nil
}

func resolveApiKey(o *options) error {
	if o.key == "" {
		o.key = os.Getenv("NEON_API_KEY")
	}

	if _, ok := (o.httpClient).(mockHTTPClient); !ok && o.key == "" {
		return errors.New(
			"authorization key must be provided: https://neon.tech/docs/reference/api-reference/#authentication",
		)
	}

	return nil
}

func resolveHTTPClient(o *options) {
	if o.httpClient == nil {
		o.httpClient = &http.Client{Timeout: defaultTimeout}
	}
}

// WithHTTPClient sets custom http Client.
func WithHTTPClient(client HTTPClient) func(*options) {
	return func(o *options) {
		o.httpClient = client
	}
}

// WithAPIKey sets the Neon API key.
func WithAPIKey(key string) func(*options) {
	return func(o *options) {
		o.key = key
	}
}

func setHeaders(req *http.Request, token string) {
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Content-Type", "application/json")
	if token != "" {
		req.Header.Add("Authorization", "Bearer "+token)
	}
}

func (c *client) requestHandler(url string, t string, reqPayload interface{}, responsePayload interface{}) error {
	var body io.Reader
	var err error

	if reqPayload != nil {
        if v := reflect.ValueOf(reqPayload); v.Kind() == reflect.Struct || !v.IsNil() {
            b, err := json.Marshal(reqPayload)
            if err != nil {
                return err
            }
            body = bytes.NewReader(b)
        }
    }

	req, _ := http.NewRequest(t, url, body)
	setHeaders(req, c.options.key)

	res, err := c.options.httpClient.Do(req)
	if err != nil {
		return err
	}

	if res.StatusCode > 299 {
		return convertErrorResponse(res)
	}

	if responsePayload != nil {
		buf, err := io.ReadAll(res.Body)
	    defer func() { _ = res.Body.Close() }()
		if err != nil {
			return err
		}
		return json.Unmarshal(buf, responsePayload)
	}

	return nil
}

{{ range .EndpointsImplementation }}
{{.}}
{{ end }}

{{ range .Types }}
{{.}}
{{ end }}
